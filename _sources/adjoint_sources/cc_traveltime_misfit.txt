===================================
Cross Correlation Traveltime Misfit
===================================

Traveltime misfits simply measure the squared traveltime difference. The
misfit :math:`\chi(\mathbf{m})` for a given Earth model :math:`\mathbf{m}`
and a single receiver and component is given by

.. math::

    \chi (\mathbf{m}) = \frac{1}{2} \left[ T^{obs} - T(\mathbf{m}) \right] ^ 2

:math:`T^{obs}` is the observed traveltime, and :math:`T(\mathbf{m})` the
predicted traveltime in Earth model :math:`\mathbf{m}`.

In practice traveltime are measured by cross correlating observed and
predicted waveforms. This particular implementation here measures cross
correlation time shifts with subsample accuracy with a fitting procedure
explained in [Deichmann1992]_. For more details see the documentation of the
:func:`~obspy.signal.cross_correlation.xcorr_pick_correction` function and the
corresponding
`Tutorial <http://docs.obspy.org/tutorial/code_snippets/xcorr_pick_correction.html>`_.


The adjoint source for the same receiver and component is then given by

.. math::

    f^{\dagger}(t) = - \left[ T^{obs} - T(\mathbf{m}) \right] ~ \frac{1}{N} ~
    \partial_t \mathbf{s}(T - t, \mathbf{m})

For the sake of simplicity we omit the spatial Kronecker delta and define
the adjoint source as acting solely at the receiver's location. For more
details, please see [Tromp2005]_ and [Bozdag2011]_.


:math:`N` is a normalization factor given by


.. math::

    N = \int_0^T ~ \mathbf{s}(t, \mathbf{m}) ~
    \partial^2_t \mathbf{s}(t, \mathbf{m}) dt

This particular implementation here uses
`Simpson's rule <http://en.wikipedia.org/wiki/Simpson's_rule>`_
to evaluate the definite integral.


Additional Parameters
---------------------

Additional parameters in addition to the default ones in the central
:func:`~pyadjoint.adjoint_source.calculate_adjoint_source` function:


**taper_percentage** (:class:`float`)
    Decimal percentage of taper at one end (ranging from ``0.0`` (0%) to
    ``0.5`` (50%)). Defauls to ``0.15``.

**taper_type** (:class:`float`)
    The taper type, supports anything :meth:`obspy.core.trace.Trace.taper`
    can use. Defaults to ``"hann"``.


Usage
-----

.. doctest::

    >>> import pyadjoint
    >>> obs, syn = pyadjoint.utils.get_example_data()
    >>> obs = obs.select(component="Z")[0]
    >>> syn = syn.select(component="Z")[0]
    >>> start, end = pyadjoint.utils.EXAMPLE_DATA_PDIFF
    >>> adj_src = pyadjoint.calculate_adjoint_source(
    ...     adj_src_type="cc_traveltime_misfit", observed=obs, synthetic=syn,
    ...     min_period=20.0, max_period=100.0, left_window_border=start,
    ...     right_window_border=end)
    >>> print(adj_src)
    Cross Correlation Traveltime Misfit Adjoint Source for component Z at station SY.DBO
        Misfit: 4.26e-11
        Adjoint source available with 3600 samples

Example Plots
-------------

The following shows plots of the :doc:`../example_dataset` for some phases.

Pdif Phase on Vertical Component
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This example contains *Pdif* and some surface reflected diffracted phases
recorded on the vertical component.

.. plot::

    import pyadjoint
    import matplotlib.pylab as plt
    fig = plt.figure(figsize=(12, 7))
    obs, syn = pyadjoint.utils.get_example_data()
    obs = obs.select(component="Z")[0]
    syn = syn.select(component="Z")[0]
    start, end = pyadjoint.utils.EXAMPLE_DATA_PDIFF
    pyadjoint.calculate_adjoint_source("cc_traveltime_misfit", obs, syn, 20.0, 100.0,
                                       start, end, adjoint_src=True, plot=fig)
    plt.show()


Sdif Phase on Transverse Component
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This example contains *Sdif* and some surface reflected diffracted phases
recorded on the transverse component.

.. plot::

    import pyadjoint
    import matplotlib.pylab as plt
    fig = plt.figure(figsize=(12, 7))
    obs, syn = pyadjoint.utils.get_example_data()
    obs = obs.select(component="T")[0]
    syn = syn.select(component="T")[0]
    start, end = pyadjoint.utils.EXAMPLE_DATA_SDIFF
    pyadjoint.calculate_adjoint_source("cc_traveltime_misfit", obs, syn, 20.0, 100.0,
                                       start, end, adjoint_src=True, plot=fig)
    plt.show()
